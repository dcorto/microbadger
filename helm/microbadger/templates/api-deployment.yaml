apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.api.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.api.name }}
spec:
  replicas: {{ .Values.api.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.api.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.api.name }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      containers:
        - name:  {{ .Values.api.name }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          args: [{{ .Values.api.args | quote }}]
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: aws.accesskey
            - name: AWS_REGION
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }}
                  key: aws.region
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: aws.secretkey
            - name: MB_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }}
                  key: mb.db.host
            - name: MB_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }}
                  key: mb.db.name
            - name: MB_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: database.password
            - name: MB_DB_USER
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }}
                  key: mb.db.user
            - name: MB_API_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }}
                  key: mb.api.url
            - name: MB_SITE_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }}
                  key: mb.site.url
            - name: MB_WEBHOOK_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }}
                  key: mb.hooks.url
            - name: SLACK_WEBHOOK
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }}
                  key: slack.webhook
            - name: SQS_SEND_QUEUE_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }}
                  key: sqs.inspect.queue
            - name: SQS_NOTIFY_QUEUE_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }}
                  key: sqs.notify.queue
            - name: MB_SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: session.secret
            - name: MB_DEBUG_CORS
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }}
                  key: mb.cors.debug
            - name: MB_CORS_ORIGIN
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }}
                  key: mb.cors.origin
            - name: MB_GITHUB_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: github.key
            - name: MB_GITHUB_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: github.secret
            - name: KMS_ENCRYPTION_KEY_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configmap.name }}
                  key: kms.encryption.key
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: {{ .Values.port }}
            protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
